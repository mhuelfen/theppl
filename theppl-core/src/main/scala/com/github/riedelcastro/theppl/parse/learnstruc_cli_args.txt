ARGS("i", ARGS::Req, inMLNFiles,
       "Comma-separated input .mln files. (With the -multipleDatabases "
       "option, the second file to the last one are used to contain constants "
       "from different domains, and they correspond to the .db files specified "
       "with the -t option.)"),

  ARGS("o", ARGS::Req, outMLNFile,
       "Output .mln file containing learned formulas and weights."),

  ARGS("t", ARGS::Req, dbFiles,
       "Comma-separated .db files containing the training database "
       "(of true/false ground atoms), including function definitions, "
       "e.g. ai.db,graphics.db,languages.db."),

  ARGS("ne", ARGS::Opt, nonEvidPredsStr,
       "[all predicates] Non-evidence predicates "
       "(comma-separated with no space), e.g., cancer,smokes,friends."),

  ARGS("multipleDatabases", ARGS::Tog, multipleDatabases,
       "If specified, each .db file belongs to a separate domain; "
       "otherwise all .db files belong to the same domain."),

  ARGS("beamSize", ARGS::Opt, beamSize, "[5] Size of beam in beam search."),

  ARGS("minWt", ARGS::Opt, minWt,
       "[0.01] Candidate clauses are discarded if "
       "their absolute weights fall below this."),

  ARGS("penalty", ARGS::Opt, penalty,
       "[0.01] Each difference between the current and previous version of a "
       "candidate clause penalizes the (weighted) pseudo-log-likelihood "
       "by this amount."),

  ARGS("maxVars", ARGS::Opt, maxVars,
       "[6] Maximum number of variables in learned clauses."),

  ARGS("maxNumPredicates", ARGS::Opt, maxNumPredicates,
       "[6] Maximum number of predicates in learned clauses."),

  ARGS("cacheSize", ARGS::Opt, cacheSize,
       "[500] Size in megabytes of the cache that is used to store the clauses "
       "(and their counts) that are created during structure learning."),

  ARGS("noSampleClauses", ARGS::Tog, noSampleClauses,
       "If specified, compute a clause's number of true groundings exactly, "
       "and do not estimate it by sampling its groundings. If not specified, "
       "estimate the number by sampling."),

  ARGS("delta", ARGS::Opt, ddelta,
       "[0.05] (Used only if sampling clauses.) "
       "The probability that an estimate a clause's number of true groundings "
       "is off by more than epsilon error is less than this value. "
       "Used to determine the number of samples of the clause's groundings "
       "to draw."),

  ARGS("epsilon", ARGS::Opt, epsilon,
       "[0.2] (Used only if sampling clauses.) "
       "Fractional error from a clause's actual number of true groundings. "
       "Used to determine the number of samples of the clause's groundings "
       "to draw."),

  ARGS("minClauseSamples", ARGS::Opt, minClauseSamples,
       "[-1] (Used only if sampling clauses.) "
       "Minimum number of samples of a clause's groundings to draw. "
       "(-1: no minimum)"),

  ARGS("maxClauseSamples", ARGS::Opt, maxClauseSamples,
       "[-1] (Used only if sampling clauses.) "
       "Maximum number of samples of a clause's groundings to draw. "
       "(-1: no maximum)"),

  ARGS("noSampleAtoms", ARGS::Tog, noSampleGndPreds,
       "If specified, do not estimate the (weighted) pseudo-log-likelihood by "
       "sampling ground atoms; otherwise, estimate the value by sampling."),

  ARGS("fractAtoms", ARGS::Opt, fraction,
       "[0.8] (Used only if sampling ground atoms.) "
       "Fraction of each predicate's ground atoms to draw."),

  ARGS("minAtomSamples", ARGS::Opt, minGndPredSamples,
       "[-1] (Used only if sampling ground atoms.) "
       "Minimum number of each predicate's ground atoms to draw. "
       "(-1: no minimum)"),

  ARGS("maxAtomSamples", ARGS::Opt, maxGndPredSamples,
       "[-1] (Used only if sampling ground atoms.) "
       "Maximum number of each predicate's ground atoms to draw. "
       "(-1: no maximum)"),

  ARGS("noPrior", ARGS::Tog, noPrior, "No Gaussian priors on formula weights."),

  ARGS("priorMean", ARGS::Opt, priorMean,
       "[0] Means of Gaussian priors on formula weights. By default, "
       "for each formula, it is the weight given in the .mln input file, "
       "or fraction thereof if the formula turns into multiple clauses. "
       "This mean applies if no weight is given in the .mln file."),

  ARGS("priorStdDev", ARGS::Opt, priorStdDev,
       "[100] Standard deviations of Gaussian priors on clause weights."),

  ARGS("tightMaxIter", ARGS::Opt, lbMaxIter,
       "[10000] Max number of iterations to run L-BFGS-B, "
       "the algorithm used to optimize the (weighted) pseudo-log-likelihood."),

  ARGS("tightConvThresh", ARGS::Opt, lbConvThresh,
       "[1e-5] Fractional change in (weighted) pseudo-log-likelihood at which "
       "L-BFGS-B terminates."),

  ARGS("looseMaxIter", ARGS::Opt, looseMaxIter,
       "[10] Max number of iterations to run L-BFGS-B "
       "when evaluating candidate clauses."),

  ARGS("looseConvThresh", ARGS::Opt, looseConvThresh,
       "[1e-3] Fractional change in (weighted) pseudo-log-likelihood at which "
       "L-BFGS-B terminates when evaluating candidate clauses."),

  ARGS("numClausesReEval", ARGS::Opt, numEstBestClauses,
       "[10] Keep this number of candidate clauses with the highest estimated "
       "scores, and re-evaluate their scores precisely."),

  ARGS("noWtPredsEqually", ARGS::Tog, noWtPredsEqually,
       "If specified, each predicate is not weighted equally. This means that "
       "high-arity predicates contribute more to the pseudo-log-likelihood "
       "than low-arity ones. If not specified, each predicate is given equal "
       "weight in the weighted pseudo-log-likelihood."),

  ARGS("startFromEmptyMLN", ARGS::Tog, startFromEmptyMLN,
       "If specified, start structure learning from an empty MLN. "
       "If the input .mln contains formulas, they will be added to the "
       "candidate clauses created in the first step of beam search. "
       "If not specified, begin structure learning from the input .mln file."),

  ARGS("tryAllFlips", ARGS::Tog, tryAllFlips,
       "If specified, the structure learning algorithm tries to flip "
       "the predicate signs of the formulas in the input .mln file "
       "in all possible ways"),

  ARGS("bestGainUnchangedLimit", ARGS::Opt, bestGainUnchangedLimit,
       "[2] Beam search stops when the best clause found does not change "
       "in this number of iterations."),


  ARGS()
